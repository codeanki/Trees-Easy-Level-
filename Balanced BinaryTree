/*
Given a binary tree, determine if it is
height-balanced
.

 

Example 1:

Input: root = [3,9,20,null,null,15,7]
Output: true

Example 2:

Input: root = [1,2,2,3,3,null,null,4,4]
Output: false

Example 3:

Input: root = []
Output: true

 

Constraints:

    The number of nodes in the tree is in the range [0, 5000].
    -104 <= Node.val <= 104
*/

class Solution{
public:
int height(BinaryTreeNode<int> *root){
if(root == NULL){
return 0;
}
return 1 + max(height(root->left), height(root->right)0 + 1;
}

bool isBalancedBT(BinaryTreeNode<int> *root){
if(root == NULL){
return true;
}
int lh = height(root->left);
int rh = height(root->right);
if(abs(lh - rh) <= 1 && isBalancedBT(root->left) && isBalancedBT(root->right)){
return true;
}else{
return false;
}
}
};
