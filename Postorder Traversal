/*
Binary Tree Postorder Traversal:

PostOrder: Right SubTree-> Left SubTree-> Root

Given the root of a binary tree, return the postorder traversal of its nodes' values.

 

Example 1:

Input: root = [1,null,2,3]
Output: [3,2,1]

Example 2:

Input: root = []
Output: []

Example 3:

Input: root = [1]
Output: [1]

 

Constraints:

    The number of the nodes in the tree is in the range [0, 100].
    -100 <= Node.val <= 100

*/

void postorder(TreeNode<int>*root, vector<int> &answer){
   if(root == NULL){
      return;
   }
   postorder(root->left, answer);
   postorder(root->right, answer);
   answer.push_back(root->data);
}

vector<int> postorderTraversal(TreeNode<int>*root){
   vector<int> answer;
   postorder(root, answer);
   return answer;
}
